generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  username      String
  role          Role     @default(MEMBER)

  projects      Project[]      @relation("ProjectOwner")
  assignedTasks Task[]         @relation("TaskAssignee")
  createdTasks  Task[]         @relation("TaskCreator")
  Comments      Comment[]
  Notifications Notification[]

  accounts Account[]
  sessions Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Project {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String
  slug        String        @unique
  isPublic    Boolean       @default(false)
  status      ProjectStatus @default(OPEN)
  startDate   DateTime?
  endDate     DateTime?
  dueDate     DateTime
  attachments String[]
  ownerId     String
  progress    Int           @default(0)
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks       Task[]
}

model Task {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  progress    Int          @default(0)
  attachments String[]
  projectId   String
  assigneeId  String?
  creatorId   String
  parentId    String?

  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator    User      @relation("TaskCreator", fields: [creatorId], references: [id])
  parentTask Task?     @relation("SubTasks", fields: [parentId], references: [id])
  subTasks   Task[]    @relation("SubTasks")
  comments   Comment[]
}

model Comment {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  content         String
  taskId          String
  userId          String
  parentCommentId String?

  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  link      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MEMBER
  CUSTOMER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum ProjectStatus {
  OPEN
  ONGOING
  COMPLETED
}
