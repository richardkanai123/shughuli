// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum Role {
  USER
  ADMIN
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

// User model with authentication and profile data
model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  hashedPassword String?
  name           String?
  image          String?
  role           Role     @default(USER)
  bio            String?

  // User relationships
  teams             TeamMember[]
  ownedTeams        Team[]          @relation("TeamOwner")
  ownedProjects     Project[]       @relation("ProjectOwner")
  assignedTasks     Task[]          @relation("TaskAssignee")
  createdTasks      Task[]          @relation("TaskCreator")
  comments          Comment[]
  notifications     Notification[]
  projectMembership ProjectMember[]
}

// Team model for organizing users
model Team {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  slug        String   @unique
  image       String?

  // Team relationships
  owner    User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  members  TeamMember[]
  projects Project[]
}

// Join table for team members
model TeamMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("member")

  // TeamMember relationships
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([teamId, userId])
}

// Project model for organizing tasks
model Project {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  slug        String    @unique
  isPublic    Boolean   @default(false)
  startDate   DateTime?
  endDate     DateTime?
  image       String?

  // Project relationships
  owner   User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId String
  team    Team?           @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId  String?
  tasks   Task[]
  labels  TaskLabel[]
  members ProjectMember[]
}

// Join table for project members
model ProjectMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("member")

  // ProjectMember relationships
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([projectId, userId])
}

// Task model
model Task {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?

  // Task relationships
  project    Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  assignee   User?                 @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId String?
  creator    User                  @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId  String
  comments   Comment[]
  labels     TaskLabelAssignment[]
  parentTask Task?                 @relation("SubTasks", fields: [parentId], references: [id], onDelete: SetNull)
  parentId   String?
  subTasks   Task[]                @relation("SubTasks")
}

// Comment model for discussions
model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  // Comment relationships
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // For threaded comments
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")
}

// Task label model
model TaskLabel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String

  // Label relationships
  project   Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     TaskLabelAssignment[]

  @@unique([projectId, name])
}

// Join table for task labels
model TaskLabelAssignment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // TaskLabelAssignment relationships
  task    Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String
  label   TaskLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId String

  @@unique([taskId, labelId])
}

// Notification model
model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String
  message   String
  isRead    Boolean  @default(false)

  // Links
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  link   String?
}
